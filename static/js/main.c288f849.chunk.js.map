{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","user","i","Card","key","Searchbox","searchField","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Cardlist","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAeeA,EAbD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,KACnD,6BACI,4BAAKF,GACL,2BAAIC,MCOLK,MAXf,YAA6B,IAAVC,EAAS,EAATA,OACf,OAAS,iCAAOA,EAAOC,KAAI,SAACC,EAAMC,GACtB,OAAO,kBAACC,EAAD,CACPC,IAAOF,EACPR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,WALtB,MCOEY,MARf,YAAgD,EAA5BC,YAA6B,IAAhBC,EAAe,EAAfA,aAC/B,OACE,yBAAKZ,UAAU,OACX,2BAAOa,SAAUD,EAAcZ,UAAU,mCAAmCc,KAAK,SAASC,YAAY,oBCI/FC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCeJC,E,kDAjBb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHE,E,8DAMAC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKX,MAAMK,a,GAdKQ,aC2CZC,E,kDAtCb,WAAYd,GAAO,IAAD,8BAChB,cAAMA,IA+BRe,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SA/BzC,EAAKX,MAAQ,CACXpB,OAAQ,GACRO,YAAa,IAJC,E,gEAOE,IAAD,OACjByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACzB,OAAOoC,S,+BAE9B,IAAD,OACAC,EAAiBb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAACC,GAC/C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKrB,MAAMb,gBAEtD,OACE,yBAAKX,UAAU,MACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,MAAd,gBAEF,kBAAC,EAAD,CACEW,YAAaiB,KAAKJ,MAAMb,YACxBC,aAAcgB,KAAKI,iBACnB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACc,EAAD,CAAU1C,OAAQqC,W,GA3BdM,IAAMjB,WCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.c288f849.chunk.js","sourcesContent":["import React from 'react'\n\nconst card  = ({name, email, id }) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robo_image\" src={`https://robohash.org/${id}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div> \n        </div>\n\n    );\n}\n\nexport default card;\n","import React from 'react';\nimport Card from './Card'\n\n\nfunction CardList({robots}) {\n    return ( <div> {robots.map((user, i) => {\n                return <Card\n                key = {i}\n                id = {robots[i].id}\n                name = {robots[i].name}\n                email = {robots[i].email} />\n            })} </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\n\nfunction Searchbox({searchField, searchChange}) {\n  return (\n    <div className=\"pa2\">\n        <input onChange={searchChange} className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" />\n    </div>\n  );\n}\n\nexport default Searchbox;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', borderTop: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        hasError: false\n    }\n  }\n  componentDidCatch(error, info){\n    this.setState({hasError: true});\n    }\n  render(){\n    if(this.state.hasError){\n        return <h1>Oooops...that is not good</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport Cardlist from '../components/Cardlist'\nimport Searchbox from '../components/Searchbox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({robots:users}))\n  }\n  render(){\n    const filteredRobots = this.state.robots.filter((robot)=>{\n      return robot.name.toLowerCase().includes(this.state.searchField);\n    });\n    return (  \n      <div className=\"tc\">\n        <div className=\"pa2\">\n          <h1 className=\"f1\">Robofriends</h1>\n        </div>\n        <Searchbox \n          searchField={this.state.searchField} \n          searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <Cardlist robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n      </div>\n    );\n  }\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}